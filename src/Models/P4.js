/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: ukrwebprom (https://sketchfab.com/ukrwebprom)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/kim-low-poly-character-54a65f4408314f26a442b0e0084a2375
Title: Kim. low poly character
*/
import { useFrame } from '@react-three/fiber'
import React, { useRef } from 'react'
import { useGLTF, useAnimations, useFBX } from '@react-three/drei'
import { useControls } from 'leva'
import { useState } from 'react'
import { useEffect } from 'react'
import * as THREE from 'three'
export const P4 = (props) => {

    const bodyRef = useRef();
    const model = useFBX("./assets/character/Character5.fbx")
    const ani = model.animations;

    model.animations[0].name = 'Idle';
    const [currentAnimation, setcurrentAnimation] = useState("Idle")
    const walk = useFBX("./assets/character/running4.fbx");
    walk.animations[0].name = "walk"
    if (ani.length < 5) {

        ani.push(walk.animations[0])
    }
    const animations = useAnimations(ani, model)


    const { animationName } = useControls({
        animationName: { options: animations.names }
    })

    useEffect(() => {
        const action = animations.actions[currentAnimation]
        action
            .reset()
            .fadeIn(0.5)
            .play()

        return () => {
            action.fadeOut(0.5)
        }
    }, [currentAnimation])


    useFrame(() => {
        let prevPosi = new THREE.Vector3(bodyRef.current.x, bodyRef.current.y, bodyRef.current.z)

        let positvector = new THREE.Vector3(props.position[0], props.position[1], props.position[2]);

        let distance = bodyRef.current.position.distanceTo(positvector);

        ////console.log(props)
        if (distance == 0) {
            ////console.log("OIIIDDLLLEEE")
            if (currentAnimation == "walk") {
                setcurrentAnimation("Idle")
            }
        } else {
            ////console.log(distance);
            ////console.log("walkkk")
            if (currentAnimation == "Idle") {
                setcurrentAnimation("walk");
            }
        }


        // ////console.log(bodyRef.current.position.x, bodyRef.current.position.y);

        bodyRef.current.position.x = props.position[0];
        bodyRef.current.position.y = props.position[1]
        bodyRef.current.position.z = props.position[2]
        const rotationQuaternion = new THREE.Quaternion();
        let rot = props.rotation[0] - Math.PI;
        ////console.log(rot);
        rotationQuaternion.setFromAxisAngle(new THREE.Vector3(0, 1, 0), rot);
        bodyRef.current.quaternion.copy(rotationQuaternion);

        // if(bodyRef.current.position)
    })

    return (
        <>
            <primitive object={model} scale={0.02} ref={bodyRef} />

        </>
    )
}

